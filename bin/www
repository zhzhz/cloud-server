#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cloud-server:server');
var http = require('http');
const {Server} = require("socket.io");
const net = require('net');
const Obj2json = require('../controllers/Obj2json');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

const io = new Server(server, {
  cors: {
    origin:"http://localhost:8081"
  }
});

io.on("connection", (socket) => {
  console.log("socketio connection");

  //创建连接云和子的连接
  let socketClient = net.connect({host:'127.0.0.1', port:5000},  () => {
    console.log('connected to cloud box server!');
  });

  //当box传回数据，字符串化后返回给浏览器
  socketClient.on('data', (data) => {
    //console.log('data back from cloud box server!',data.toString());

    socket.emit('serverRes', data.toString());
  });

  socket.on('clientReq', function(data) {
    //console.log("socket.io clientReq", data);
    
    //将数据字符串化转发给云盒子
    socketClient.write(Obj2json(data));//向box服务器发送请求
  });

  //socket.emit('serverRes', { description: 'socket.io server res'});
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
